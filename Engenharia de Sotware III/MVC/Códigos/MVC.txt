import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

// Strategy: Definindo a interface para os métodos de pagamento
interface MetodoPagamento {
    void processarPagamento(double valor);
}

// Concrete Strategies: Implementações específicas para cartão de crédito, débito e dinheiro
class CartaoCredito implements MetodoPagamento {
    @Override
    public void processarPagamento(double valor) {
        System.out.println("Pagamento com cartão de crédito no valor de R$" + valor);
    }
}

class CartaoDebito implements MetodoPagamento {
    @Override
    public void processarPagamento(double valor) {
        System.out.println("Pagamento com cartão de débito no valor de R$" + valor);
    }
}

class Dinheiro implements MetodoPagamento {
    @Override
    public void processarPagamento(double valor) {
        System.out.println("Pagamento em dinheiro no valor de R$" + valor);
    }
}

// Composite: Agrupa diferentes métodos de pagamento
class PagamentoComposto implements MetodoPagamento {
    private List<MetodoPagamento> metodos = new ArrayList<>();

    public void adicionarMetodo(MetodoPagamento metodo) {
        metodos.add(metodo);
    }

    @Override
    public void processarPagamento(double valor) {
        System.out.println("Pagamento composto:");
        for (MetodoPagamento metodo : metodos) {
            metodo.processarPagamento(valor);
        }
    }
}

// Observer: Observador para notificar sobre o status do pagamento
class ObservadorPagamento implements Observer {
    @Override
    public void update(Observable o, Object arg) {
        System.out.println("Status do pagamento: " + arg);
    }
}

// Observable: Representa o modelo do pagamento
class ModeloPagamento extends Observable {
    private String status;

    public void setStatus(String novoStatus) {
        this.status = novoStatus;
        setChanged();
        notifyObservers(novoStatus);
    }
}

// Controller: Controlador que interage com o modelo e os métodos de pagamento
class ControladorPagamento {
    private ModeloPagamento modelo;

    public ControladorPagamento(ModeloPagamento modelo) {
        this.modelo = modelo;
    }

    public void processarPagamento(MetodoPagamento metodo, double valor) {
        // Lógica adicional antes do processamento do pagamento
        modelo.setStatus("Processando pagamento...");

        // Processamento do pagamento
        metodo.processarPagamento(valor);

        // Lógica adicional após o processamento do pagamento
        modelo.setStatus("Pagamento concluído");
    }
}

// Main: Cliente que utiliza o padrão MVC para processar pagamentos
public class Main {
    public static void main(String[] args) {
        // Configuração do padrão Observer
        ModeloPagamento modelo = new ModeloPagamento();
        ObservadorPagamento observador = new ObservadorPagamento();
        modelo.addObserver(observador);

        // Configuração do padrão Strategy + Composite
        PagamentoComposto pagamentoComposto = new PagamentoComposto();
        pagamentoComposto.adicionarMetodo(new CartaoCredito());
        pagamentoComposto.adicionarMetodo(new CartaoDebito());
        pagamentoComposto.adicionarMetodo(new Dinheiro());

        // Configuração do padrão MVC
        ControladorPagamento controlador = new ControladorPagamento(modelo);

        // Processar pagamento usando o padrão MVC
        controlador.processarPagamento(pagamentoComposto, 100.0);
    }
}
